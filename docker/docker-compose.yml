# docker-compose.yml

services:
  producer:
    build: .
    image: kafka-snowflake-stream:latest
    container_name: producer
    environment:
      KAFKA_BOOTSTRAP_SERVER: redpanda:9092
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
    command: ["python", "-u", "kafka_producer.py"]
    volumes:
      - ./streaming/kafka_producer.py:/app/kafka_producer.py
    depends_on:
      - redpanda
    networks:
      - app-net

  consumer:
    build: .
    image: kafka-snowflake-stream:latest
    container_name: consumer
    environment:
      KAFKA_BOOTSTRAP_SERVER: redpanda:9092
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
      SNOWFLAKE_USER: ${SNOWFLAKE_USER}
      SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
      SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}
      SNOWFLAKE_WAREHOUSE: ${SNOWFLAKE_WAREHOUSE}
      SNOWFLAKE_DATABASE: ${SNOWFLAKE_DATABASE}
      SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA}
    command: ["python", "-u", "kafka_consumer_snowflake.py"]
    ports:
      - "8000:8000"  # Expose Prometheus metrics endpoint
    volumes:
      - ./streaming/kafka_consumer_snowflake.py:/app/kafka_consumer_snowflake.py
    depends_on:
      - redpanda
    networks:
      - app-net
      - caves-albert-monitoring  # Connect to monitoring network

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda start --smp 1 --overprovisioned --node-id 0
      - --kafka-addr INTERNAL://redpanda:9092,OUTSIDE://0.0.0.0:19092
      - --advertise-kafka-addr INTERNAL://redpanda:9092,OUTSIDE://localhost:19092
    ports:
      - "19092:19092"
      - "9644:9644"
    networks:
      - app-net

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      - redpanda
    networks:
      - app-net

networks:
  app-net:
    driver: bridge
  caves-albert-monitoring:
    external: true  # Use external monitoring network